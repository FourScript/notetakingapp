import { users } from '../models/database.js'
import jwt from 'jsonwebtoken'
import bcrypt from 'bcrypt'

const search = async (email, res) => {
    return new Promise((resolve, reject) => {
        // Search for the user email in the database
        console.log("Item id: ", users.item(email, "email"))
        if (users.item(email, 'email'))
            resolve(true);
        else
            reject(false);
    })
}

const register = async (email, password, res) => {
    const rounds = 10; // Processing cost/speed

    bcrypt.hash(password, rounds, function(err, hash) {
        if (!err)
            // IDs are automatically generated by the database
            users.items.create({
                email: email,
                password: hash
            }).then(() => {
                return res.status(201).json({ message: 'User created' })
            }).catch((err) => {
                return res.status(500).json({ error: `Database error while registering user ${email}:\n${err}` })
            })
        else
            return res.status(500).json({ error: err })

    });
}

const login = async (email, password, res) => {
    users.items.query(
        `SELECT * FROM users WHERE email = '${email}';`
    ).fetchNext().then((results) => {
            if (results.length === 0) {
                console.log("Account doesn't exist.")
                return res.status(401).json({error: `This JotFox account doesn't exist. Try a different Email.`})
            } else {
                const validPassword = bcrypt.compare(password, results[0].password)

                if (!validPassword) {
                    console.log("Incorrect password.")
                    return res.status(400).json({error: 'The email address or password you entered is invalid. Please try again.'})
                }

                console.log("All good, here's a JWT.")
                const accessToken = jwt.sign(results[0].userID, process.env.AUTH_TOKEN_SECRET)
                res.status(200).json({accessToken: accessToken})
            }
        }
    ).catch((error) => {
            throw error;
    })
}

const remove = async (req, res) => {
    users.query(
        `DELETE FROM users WHERE userID = '${req.userID}';`,
        async (err, results) => {
            if (err) throw err
            if (results.affectedRows === 0) {
                return res.status(400).json({ error : `User Account deletion unsuccessful. AKA Couldn't Find User` })
            }
            users.query(
                `DELETE FROM notes WHERE userID = '${req.userID}';`,
                async (err, results) => {
                    if (err) throw err
                    if (results.affectedRows === 0) {
                        return res.status(400).json({ error : `Note deletion unsuccessful. AKA Couldn't Find Note(s).` })
                    }
                    return res.status(200).json({ message : `Account & Notes deleted.` })
            })
    })
}

const userService = { search, register, login, remove }
export default userService
